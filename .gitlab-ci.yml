stages:
  - build

variables:
  # Use a Docker image that has both Java 17 and Android SDK
  ANDROID_COMPILE_SDK: "35"
  ANDROID_BUILD_TOOLS: "35.0.0"
  ANDROID_SDK_TOOLS: "9477386"

android_build:
  stage: build
  image: openjdk:17-slim
  
  # Add caching for better performance
  cache:
    key: android-build-cache
    paths:
      - android/.gradle/
      - node_modules/
      - /opt/android-sdk/
  
  before_script:
    # Install required packages
    - apt-get update -qq && apt-get install -y -qq git curl unzip wget nodejs npm
    
    # Set up Java 17 environment
    - export JAVA_HOME=/usr/local/openjdk-17
    - export PATH=$JAVA_HOME/bin:$PATH
    - java -version
    
    # Install Android SDK (check if cached first)
    - export ANDROID_SDK_ROOT=/opt/android-sdk
    - |
      if [ ! -d "$ANDROID_SDK_ROOT/cmdline-tools" ]; then
        echo "Installing Android SDK..."
        mkdir -p $ANDROID_SDK_ROOT
        cd $ANDROID_SDK_ROOT
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-${ANDROID_SDK_TOOLS}_latest.zip
        unzip -q commandlinetools-linux-${ANDROID_SDK_TOOLS}_latest.zip
        mkdir -p cmdline-tools/latest
        mv cmdline-tools/* cmdline-tools/latest/ || true
      else
        echo "Using cached Android SDK"
      fi
    - export PATH=$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH
    
    # Accept licenses and install required SDK components (only if not cached)
    - |
      if [ ! -d "$ANDROID_SDK_ROOT/platforms/android-${ANDROID_COMPILE_SDK}" ]; then
        echo "Installing Android SDK components..."
        yes | sdkmanager --licenses
        sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}" "build-tools;${ANDROID_BUILD_TOOLS}"
      else
        echo "Using cached Android SDK components"
      fi
    
    # Go back to project directory
    - cd $CI_PROJECT_DIR
    
    # Install Node.js dependencies (npm ci uses package-lock.json for faster installs)
    - npm ci
    
    # Install Fastlane (Ruby) - cache gems
    - apt-get install -y ruby ruby-dev build-essential
    - gem install fastlane --no-document

  script:
    # Set environment variables for Gradle
    - export JAVA_HOME=/usr/local/openjdk-17
    - export ANDROID_SDK_ROOT=/opt/android-sdk
    - export PATH=$JAVA_HOME/bin:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH
    
    # Build the app using Fastlane
    - fastlane android build
    
  artifacts:
    paths:
      - android/app/build/outputs/
    expire_in: 1 week
    
  only:
    - main
    - develop
    - merge_requests